from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from filters.chat_types import ChatTypeFilter
from filters.is_admin import IsAdminMsg
from database.orm_query import orm_delete_faq, orm_get_faq, orm_add_faq, orm_get_faqs, orm_get_note, orm_delete_note, \
    orm_add_note, orm_get_notes
from keyboards.inline.inline_add_product import get_callback_btns, get_callback_btns_extra_btn
from lexicon.lexicon import LEXICON_btn_main_admin_menu

admin_faq_router = Router()
admin_faq_router.message.filter(ChatTypeFilter(['private']), IsAdminMsg())
admin_faq_router.callback_query.filter(IsAdminMsg())


class Add_FAQ(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    name = State()
    description = State()

    texts = {
        'AddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddProduct:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
    }


class AddNote(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    name = State()
    description = State()

    texts = {
        'AddNote:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddNote:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
    }


################################ add note ############################################################

@admin_faq_router.callback_query(F.data == 'note_list')
async def admin_features(callback: types.CallbackQuery, session: AsyncSession):
    notes = await orm_get_notes(session)
    if len(notes) > 0:
        btns = {note.name: f'note_{note.id}' for note in notes}
        back_to_main_menu = InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="admin")
        markup = get_callback_btns_extra_btn(btns=btns, extra_buttons=[back_to_main_menu])
        await callback.message.answer("–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup=markup)
    else:
        await callback.message.answer("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ü§î.\n–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.üìù")



@admin_faq_router.callback_query(F.data.startswith('note_'))
async def starring_at_notes(callback: types.CallbackQuery, session: AsyncSession):
    note_id = callback.data.split('_')[-1]
    note_item = await orm_get_note(session, int(note_id))
    await callback.message.answer(
        f"<strong>{note_item.name}</strong>\n\n"
        f"{note_item.description}\n\n",
        reply_markup=get_callback_btns(
            btns={
                "–£–¥–∞–ª–∏—Ç—å": f"not_delete_{note_item.id}",
                "–ù–∞–∑–∞–¥": f"note_list",
            },
            sizes=(2,)
        ),
    )
    await callback.answer()

################################## note list –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è ############

@admin_faq_router.callback_query(F.data == 'useful_information')
async def admin_features(callback: types.CallbackQuery, session: AsyncSession):
    notes = await orm_get_notes(session)
    if len(notes) > 0:
        btns = {note.name: f'note2_{note.id}' for note in notes}
        back_to_main_menu = InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="links_main")
        markup = get_callback_btns_extra_btn(btns=btns, extra_buttons=[back_to_main_menu])
        await callback.message.answer("–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup=markup)
    else:
        await callback.message.answer("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ü§î.\n–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.üìù")


@admin_faq_router.callback_query(F.data.startswith('note2_'))
async def starring_at_notes(callback: types.CallbackQuery, session: AsyncSession):
    note_id = callback.data.split('_')[-1]
    note_item = await orm_get_note(session, int(note_id))
    await callback.message.answer(
        f"<strong>{note_item.name}</strong>\n\n"
        f"{note_item.description}\n\n",
        reply_markup=get_callback_btns(
            btns={
                "–ù–∞–∑–∞–¥": f"useful_information",
            },
            sizes=(1,)
        ),
    )
    await callback.answer()

##############################################################


@admin_faq_router.callback_query(F.data.startswith("not_delete_"))
async def delete_note_callback(callback: types.CallbackQuery, session: AsyncSession):
    note_id = callback.data.split("_")[-1]
    await orm_delete_note(session, int(note_id))
    await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!")
    await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!")

# FSM:

# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
@admin_faq_router.callback_query(StateFilter(None), F.data == 'add_note')
# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    await callback.message.delete()
    await state.set_state(AddNote.name)


# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)



# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@admin_faq_router.message(AddNote.name, F.text)
async def add_name(message: types.Message, state: FSMContext):
    if 4 >= len(message.text) >= 150:
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤\n–∏–ª–∏ –±—ã—Ç—å –º–µ–Ω–µ–µ 5—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
        )
        return

    await state.update_data(name=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    await state.set_state(AddNote.description)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name
@admin_faq_router.message(AddNote.name)
async def add_name2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description
@admin_faq_router.message(AddNote.description, F.text)
async def add_description(message: types.Message, state: FSMContext, session: AsyncSession):
    if 4 >= len(message.text):
        await message.answer(
            "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
        )
        return
    await state.update_data(description=message.text)
    data = await state.get_data()

    try:
        await orm_add_note(session, data)
        await message.answer("–ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω üëç", reply_markup=get_callback_btns(btns=LEXICON_btn_main_admin_menu, sizes=(2,)))
        await state.clear()

    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç", sizes=(2,))
        await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è description
@admin_faq_router.message(AddNote.description)
async def add_description2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!")


################################ add faq ############################################################

@admin_faq_router.callback_query(F.data == 'faq_list')
async def admin_features(callback: types.CallbackQuery, session: AsyncSession):
    faqs = await orm_get_faqs(session)
    if len(faqs) > 0:
        btns = {faq.name: f'faq_{faq.id}' for faq in faqs}
        back_to_main_menu = InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="admin")
        markup = get_callback_btns_extra_btn(btns=btns, extra_buttons=[back_to_main_menu])
        await callback.message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=markup)
    else:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–≤ –ø—É—Å—Çü§î.\n–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.üìù")


@admin_faq_router.callback_query(F.data.startswith('faq_'))
async def starring_at_product(callback: types.CallbackQuery, session: AsyncSession):
    faq_id = callback.data.split('_')[-1]
    faq_item = await orm_get_faq(session, int(faq_id))
    await callback.message.answer(
        f"<strong>{faq_item.name}</strong>\n\n"
        f"{faq_item.description}\n\n",
        reply_markup=get_callback_btns(
            btns={
                "–£–¥–∞–ª–∏—Ç—å": f"drop_{faq_item.id}",
                "–ù–∞–∑–∞–¥": f"faq_list",
            },
            sizes=(2,)
        ),
    )
    await callback.answer()


@admin_faq_router.callback_query(F.data.startswith("drop_"))
async def delete_product_callback(callback: types.CallbackQuery, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    await orm_delete_faq(session, int(product_id))

    await callback.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω")
    await callback.message.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!")

# FSM:

# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
@admin_faq_router.callback_query(StateFilter(None), F.data == 'add_faq')
# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
    await callback.message.delete()
    await state.set_state(Add_FAQ.name)


# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)



# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@admin_faq_router.message(Add_FAQ.name, F.text)
async def add_name(message: types.Message, state: FSMContext):
    if 4 >= len(message.text) >= 150:
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤\n–∏–ª–∏ –±—ã—Ç—å –º–µ–Ω–µ–µ 5—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
        )
        return

    await state.update_data(name=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")
    await state.set_state(Add_FAQ.description)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name
@admin_faq_router.message(Add_FAQ.name)
async def add_name2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description
@admin_faq_router.message(Add_FAQ.description, F.text)
async def add_description(message: types.Message, state: FSMContext, session: AsyncSession):
    if 4 >= len(message.text):
        await message.answer(
            "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
        )
        return
    await state.update_data(description=message.text)
    data = await state.get_data()
    try:
        await orm_add_faq(session, data)
        await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω üëç", reply_markup=get_callback_btns(btns=LEXICON_btn_main_admin_menu, sizes=(2,)))
        await state.clear()
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É, –æ–Ω –æ–ø—è—Ç—å –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç", sizes=(2,))
        await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è description
@admin_faq_router.message(Add_FAQ.description)
async def add_description2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")